rule DefaultValues salience 10000000 {
    when 
        true
    then
    <% defaultValues.forEach(function(feat){ %>
        result.Put("<%=feat.name%>", "<%=feat.defaultValue%>");
    <% }); %><% 
    Object.entries(groups).forEach(function([group, entry]){ 
        Object.values(entry).forEach(function(items, index){ 
            items.forEach(function(item) {%>
        ctx.AddItem("<%=group + '_' + index%>_entries", "<%-item%>");
    <%      });
        });
     }); %>
        Retract("DefaultValues");
}
<% if (remoteLoadeds.length > 0) { %>
rule RemoteLoaded salience 10000000 {
    when 
        true
    then
    <% remoteLoadeds.forEach(function(param){ %>
        ctx.RegistryRemoteLoadedWithFrom("<%=param.name%>", "<%=param.resolver%>", "<%=param.from%>");
    <% }); %> 
        Retract("RemoteLoaded");
}
<% } %><% featureRules.forEach(function(feat){ %>
rule feat_<%=feat.name%> salience <%=feat.precedence%> {
    when <% if(feat.condition) { %>
        <%-feat.condition%><% } else { %>
        true <% } %>
    then
        ctx.Put("<%=feat.name%>", <%-feat.expression%>);
        <% if(feat.result) { %>
        result.Put("<%=feat.name%>", ctx.<%=feat.accessMethod%>("<%=feat.name%>"));
        <% } %>
        Retract("feat_<%=feat.name%>");
}
<% }); %>